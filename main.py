from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os

TOKEN = "7949738221:AAHdU0oW6wrIxLUZkCT2I5IPmAgAMTRy0oU"
ADMIN_ID = 8048779916
CHANNEL_ID = -1002626166337

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
pending_messages = {}
blocked_users = set()

WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª.

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:
1. –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
2. –ù–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
3. –ù–µ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –∞–¥–º–∏–Ω–∞

–ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!
"""

CONFIRMATION_MESSAGE = """
‚úÖ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!

–ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω –≤—ã–ª–æ–∂–∏—Ç –µ–≥–æ –≤ –∫–∞–Ω–∞–ª.

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ /start
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(WELCOME_MESSAGE, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message = update.message
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
    if not message or user.id in blocked_users or (message.text and message.text.startswith('/')):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    pending_messages[message.message_id] = {
        "user": {
            "id": user.id,
            "name": user.full_name,
            "username": f"@{user.username}" if user.username else "–Ω–µ—Ç"
        },
        "content": message
    }
    
    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{message.message_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.message_id}")
        ],
        [
            InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.message_id}"),
            InlineKeyboardButton("‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{message.message_id}")
        ]
    ])
    
    user_info = f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user.full_name} (ID: {user.id})"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        if message.text:
            await context.bot.send_message(
                ADMIN_ID,
                f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}\n\n{user_info}",
                reply_markup=keyboard
            )
        elif message.photo:
            await context.bot.send_photo(
                ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=f"üì∏ –§–æ—Ç–æ\n\n{user_info}" + (f"\n\n{message.caption}" if message.caption else ""),
                reply_markup=keyboard
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply_text(CONFIRMATION_MESSAGE, parse_mode='Markdown')
        
    except Exception as e:
        await context.bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    action, msg_id = query.data.split('_')
    msg_id = int(msg_id)
    
    if msg_id not in pending_messages:
        await query.edit_message_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return
    
    user_data = pending_messages[msg_id]["user"]
    message = pending_messages[msg_id]["content"]
    
    try:
        if action == "approve":
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
            if message.text:
                await context.bot.send_message(CHANNEL_ID, f"‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}")
            elif message.photo:
                await context.bot.send_photo(CHANNEL_ID, message.photo[-1].file_id)
            
            await query.edit_message_text(f"{query.message.text}\n\n‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!")
        
        elif action == "reject":
            await query.edit_message_text(f"{query.message.text}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        
        elif action == "block":
            blocked_users.add(user_data["id"])
            await context.bot.send_message(user_data["id"], "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
            await query.edit_message_text(f"{query.message.text}\n\n‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        elif action == "reply":
            await query.edit_message_text(
                f"{query.message.text}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
            context.user_data['reply_to'] = user_data["id"]
    
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    del pending_messages[msg_id]

async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    if 'reply_to' not in context.user_data:
        return
    
    user_id = context.user_data['reply_to']
    try:
        await context.bot.send_message(
            user_id,
            f"üì® –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{update.message.text}"
        )
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    del context.user_data['reply_to']

if _name_ == "_main_":
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & filters.Chat(ADMIN_ID), handle_admin_reply))
    
    app.run_polling()
